/**
 * This is the SAW script you will use to compare your Cryptol code
 * against the C implementations in bittwiddling.c.
 */

print "Importing Cryptol file";
import "BittwiddlingAnswers.md";

print "Importing C file";
l <- llvm_load_module "bittwiddling.bc";

print "Extracting parity8bit function";
parity8bit_c <- crucible_llvm_extract l "parity8bit";

print "Checking C parity8bit implementation vs Cryptol specification";
let thm1 = {{ \x -> parity8bit_c x == [ parity x ] }};
result <- prove z3 thm1;
print result;

print "Extracting parity32bit function";
parity32bit_c <- crucible_llvm_extract l "parity32bit";

print "Checking C parity32bit implementation vs Cryptol specification";
let thm2 = {{ \x -> parity32bit_c x == [ parity x ] }};
result <- prove z3 thm2;
print result;

print "Extracting parity64bit function";
parity64bit_c <- crucible_llvm_extract l "parity64bit";

print "Checking C parity64bit implementation vs Cryptol specification";
let thm3 = {{ \x -> parity64bit_c x == [ parity x ] }};
result <- prove z3 thm3;
print result;

print "Extracting reversebyte function";
reversebyte_c <- crucible_llvm_extract l "reversebyte";

print "Checking C reversebyte implementation vs Cryptol specification";
let thm4 = {{ \x -> reversebyte_c x == reverseByte x }};
result <- prove z3 thm4;
print result;

print "Extracting anyZeroByte function";
anyZeroByte_c <- crucible_llvm_extract l "anyZeroByte";

print "Checking C anyZeroByte implementation vs Cryptol specification";
let thm5 = {{ \x -> anyZeroByte_c x == [ anyZeroByte x ] }};
result <- prove z3 thm5;
print result;
