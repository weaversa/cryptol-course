module labs::CRC::spec::CRC where

/**
 * Cyclic Redundancy Check (CRC)
 *
 * This function takes 6 parameters:
 * 1) G, the degree-n generator polynomial
 * 2) fill, the initial fill of a CRC when implemented by a linear
 *    feedback shift register. Since we're implementing CRC here with
 *    polynomial arithmetic, we can add this parameter by XORing the
 *    initial fill into the high-order bits of the zero-expanded
 *    message before calculating the modulus.
 * 3) post, a sequence of bits that are XOR'd into the modulus to
 *    create the final output.
 * 4) rib, denotes whether or not the input (when viewed as a sequence
 *    of bytes) should have the bits inside each byte reversed.
 * 5) ro, denotes whether or not the output (when viewed as a
 *    bitvector) should be reversed.
 * 6) M, an m-byte message.
 */

CRC :
    {n, m}
    (fin n, fin m) =>
    [n+1] -> [n] -> [n] -> Bit -> Bit -> [m][8] -> [n]
CRC G fill post rib ro M =
    if ro then reverse R else R
  where
    R      = pmod (fill' ^ M'') G ^ post
    M'     = join (if rib then (map reverse M) else M)
    M''    = M'   # (0 : [n])
    fill'  = fill # (0 : [m*8])

CRC32 = CRC G 0xffffffff 0xffffffff True True
  where G = <| x^^32 + x^^26 + x^^23 + x^^22 + x^^16 + x^^12 + x^^11 + x^^10 + x^^8 + x^^7 + x^^5 + x^^4 + x^^2 + x + 1 |>

CRC32_BZIP2 = CRC G 0xffffffff 0xffffffff False False
  where G = <| x^^32 + x^^26 + x^^23 + x^^22 + x^^16 + x^^12 + x^^11 + x^^10 + x^^8 + x^^7 + x^^5 + x^^4 + x^^2 + x + 1 |>

CRC32_C = CRC G 0xffffffff 0xffffffff True True
  where G = <| x^^32 + x^^28 + x^^27 + x^^26 + x^^25 + x^^23 + x^^22 + x^^20 + x^^19 + x^^18 + x^^14 + x^^13 + x^^11 + x^^10 + x^^9 + x^^8 + x^^6 + 1 |>

CRC32_D = CRC G 0xffffffff 0xffffffff True True
  where G = <| x^^32 + x^^31 + x^^29 + x^^27 + x^^21 + x^^20 + x^^17 + x^^16 + x^^15 + x^^12 + x^^11 + x^^5 + x^^3 + x + 1 |>

CRC32_MPEG2 = CRC G 0xffffffff 0x00000000 False False
  where G = <| x^^32 + x^^26 + x^^23 + x^^22 + x^^16 + x^^12 + x^^11 + x^^10 + x^^8 + x^^7 + x^^5 + x^^4 + x^^2 + x + 1 |>

CRC32_POSIX = CRC G 0x00000000 0xffffffff False False
  where G = <| x^^32 + x^^26 + x^^23 + x^^22 + x^^16 + x^^12 + x^^11 + x^^10 + x^^8 + x^^7 + x^^5 + x^^4 + x^^2 + x + 1 |>

CRC32_Q = CRC G 0x00000000 0x00000000 False False
  where G = <| x^^32 + x^^31 + x^^24 + x^^22 + x^^16 + x^^14 + x^^8 + x^^7 + x^^5 + x^^3 + x + 1 |>

CRC32_JAMCRC = CRC G 0xffffffff 0x00000000 True True
  where G = <| x^^32 + x^^26 + x^^23 + x^^22 + x^^16 + x^^12 + x^^11 + x^^10 + x^^8 + x^^7 + x^^5 + x^^4 + x^^2 + x + 1 |>

CRC32_XFER = CRC G 0x00000000 0x00000000 False False
  where G = <| x^^32 + x^^7 + x^^5 + x^^3 + x^^2 + x + 1 |>


private

  testM = "The quick brown fox jumps over the lazy dog"

  property CRC32Test = CRC32 testM == 0x414FA339
  property CRC32_BZIP2Test = CRC32_BZIP2 testM == 0x459DEE61
  property CRC32_CTest = CRC32_C testM == 0x22620404
  property CRC32_DTest = CRC32_D testM == 0x9D251C62
  property CRC32_MPEG2Test = CRC32_MPEG2 testM == 0xBA62119E
  property CRC_POSIXTest = CRC32_POSIX testM == 0x36B78081
  property CRC32_QTest =  CRC32_Q testM == 0xF4965FFC
  property CRC32_JAMCRCTest = CRC32_JAMCRC testM == 0xBEB05CC6
  property CRC32_XFERTest = CRC32_XFER testM == 0x140493E5
